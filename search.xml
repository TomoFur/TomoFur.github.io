<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/05/14/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0---%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E7%AF%87/"/>
      <url>/2019/05/14/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0---%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<hr><p>title: webpack学习—-基础配置篇<br>tags: webpack<br>categories: webpack<br>​—</p><p>webpack：模块打包机</p><p>webpack安装：推荐在项目内本地安装，不推荐使用全局安装。</p><p>如果配置文件的名字不是<code>webpack.config.js</code>的话，在使用<code>npx webpack</code>进行打包的时候要<code>npx webpack --config 自定义的配置文件名字</code></p><p>webpack-cli的作用：可以使我们在命令行中运行webpack这个指令，如果不安装webpack-cli，则在命令行中运行webpack指令会报错。</p><h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><p>作用：Loader直译为”加载器“,webpack将一切文件都看成是模块，但是原声带webpack只能解析js文件，如果其他文件也想被打包的话，就会用到相应的loader，所以loader的作用是让webpack拥有加载和解析非JavaScript文件的能力。</p><h2 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h2><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.(jpg|png|gif)$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span><span class="token string">'file-loader'</span><span class="token punctuation">,</span>                    options<span class="token punctuation">:</span><span class="token punctuation">{</span>                        name<span class="token punctuation">:</span><span class="token string">'[name]_[hash:8].[ext]'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//打包的图片的名字是源文件名字_8位hash</span>                        outputPath<span class="token punctuation">:</span><span class="token string">'/images'</span><span class="token comment" spellcheck="true">//打包输出的图片存放在dist目录下的images文件里。</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h2><p>把图片转化为base64的字符串插入到打包的js文件里，减少了依次http请求。缺点是如果打包的文件特别大，生成的base64字符串也会特别大，所以，对于较小的图片，适合使用url-loader，对于较大的图片，还是使用file-loader比较好。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//配置的rules和file-loader及其相似。</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.(jpg|gif|png)$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span><span class="token string">'url-loader'</span><span class="token punctuation">,</span>                    options<span class="token punctuation">:</span><span class="token punctuation">{</span>                        name<span class="token punctuation">:</span><span class="token string">'[name]_[hash:8].[ext]'</span><span class="token punctuation">,</span>                        outputPath<span class="token punctuation">:</span><span class="token string">'/images'</span><span class="token punctuation">,</span>                        limit<span class="token punctuation">:</span><span class="token number">5000</span><span class="token comment" spellcheck="true">//这是和file-loader最主要的区别，url-loader在打包图片时，如果图片大小小于配置的limit值，就将图片传化位base64的字符串插入到打包的js文件中，如果大于limit，打包规则就和file-loader一致。所以也可以说url-loader是对file-loader更深层次的包装。</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="webpack处理样式相关的文件"><a href="#webpack处理样式相关的文件" class="headerlink" title="webpack处理样式相关的文件"></a>webpack处理样式相关的文件</h2><h3 id="打包css文件"><a href="#打包css文件" class="headerlink" title="打包css文件"></a>打包css文件</h3><ol><li><code>npm install style-loader css-loader -D</code></li><li>添加相应的规则</li></ol><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.css/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//style-loader作用是生成一个&lt;style>&lt;style>标签插入在html文件中，css-loader作用是解析@import xxx.cs这种语法。</span></code></pre><h3 id="打包scss文件"><a href="#打包scss文件" class="headerlink" title="打包scss文件"></a>打包scss文件</h3><ol><li><code>npm install style-loader css-loader sass-loader</code></li><li>添加相应的规则</li></ol><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.scss/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'sass-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p>上述处理样式的文件的方法，都会吧css文件直接以<code>&lt;style&gt;</code>标签的形式插入到生成的html文件中，而如果我们希望将css文件打包后单曲抽离出来成为一个文件，且通过link标签的形式引入，就需要这样做：</p><h3 id="将css文件抽离出来成为一个单独的文件"><a href="#将css文件抽离出来成为一个单独的文件" class="headerlink" title="将css文件抽离出来成为一个单独的文件"></a>将css文件抽离出来成为一个单独的文件</h3><ol><li><code>npm install mini-css-extract-plugin -D</code>安装相应的插件</li><li>在配置文件中使用这个插件</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    filename<span class="token punctuation">:</span><span class="token string">'css/main.css'</span><span class="token comment" spellcheck="true">//将抽离出来的css文件会存放在打包时产生的bulid文件夹下的css文件夹下的main.css</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>3.将处理css和less文件的loader中的<code>style-loader</code>替换为<code>MiniCssExtractPlugin.loader</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>### </p><h3 id="给css3属性加浏览器前缀"><a href="#给css3属性加浏览器前缀" class="headerlink" title="给css3属性加浏览器前缀"></a>给css3属性加浏览器前缀</h3><p>使用的loader是<code>postcss-loader</code>使用的插件是<code>autoprefixer</code></p><p>具体过程如下：</p><ol><li>安装相应的loader和插件</li><li>在根目录下建一个postcss.config.js，里面内容如下：</li></ol><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>将postcss-loader写在相应的rules里面。（写在处理css文件的css-loader的下面即可）</li></ol><h3 id="处理字体图标"><a href="#处理字体图标" class="headerlink" title="处理字体图标"></a>处理字体图标</h3><ol><li>在iconfont字体图标矢量库中选区自己需要的字体图标，下载代码到本地</li><li>将下载下来的代码中的字体文件和iconfont.css文件拷贝到项目中。</li><li>修改webpack.config.js的配置项，新增加一个匹配规则如下：</li></ol><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.(svg|ttf|eot|woff)$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">{</span>            loader<span class="token punctuation">:</span><span class="token string">'file-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span><span class="token punctuation">{</span>                outputPath<span class="token punctuation">:</span><span class="token string">'./fonts'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>在项目的index.css文件里通过<code>@import &#39;iconfont.css&#39;</code>的形式引入字体图标的样式文件。</li></ol><h1 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h1><p>作用：Plugin的直译是‘’插件‘’.Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。在webpack运行的生命周期中会广播出来许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的api改变输出结果。</p><h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><p>作用：在打包结束之后，自动生成一个html文件，并将打包生成的js文件自动引入到这个html文件中。</p><p>使用方法：</p><ol><li>下载安装相应的插件<code>npm install html-webpack-plugin -D</code> </li><li>修改配置文件，添加plugins属性</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'./src/index.html'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//打包后自动生成的html文件的模板</span>            filename<span class="token punctuation">:</span><span class="token string">'index.html'</span><span class="token comment" spellcheck="true">//自动生成的html文件的名字</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h2><p>作用：在每次打包之前都会将上一次打包生成的dist目录删除掉。</p><p>使用方法：</p><ol><li>安装相应的插件<code>npm install clean-webpack-plugin -D</code></li><li>修改配置文件，添加相应的plugin</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在打包之前删除dist目录中的内容。</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="多入口情况处理"><a href="#多入口情况处理" class="headerlink" title="多入口情况处理"></a>多入口情况处理</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 多入口</span><span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">let</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>        home<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>        other<span class="token punctuation">:</span> <span class="token string">'./src/other.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        filename<span class="token punctuation">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//这里的name就是entry里面的两个文件，可以是home，也可以是other</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        publicPath<span class="token punctuation">:</span>cdn地址<span class="token comment" spellcheck="true">//这里再打包完之后，会在html文件引入打包的js文件之前都加入这个cdn</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token string">'./index.html'</span><span class="token punctuation">,</span>            filename<span class="token punctuation">:</span> <span class="token string">'home.html'</span><span class="token punctuation">,</span>            chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'home'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//表示home.html里面引入的是打包生成的home.js</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token string">'./index.html'</span><span class="token punctuation">,</span>            filename<span class="token punctuation">:</span> <span class="token string">'other.html'</span><span class="token punctuation">,</span>            chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">,</span> <span class="token string">'home'</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">// other.html 里面有 other.js &amp; home.js</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="souce-map的配置"><a href="#souce-map的配置" class="headerlink" title="souce-map的配置"></a>souce-map的配置</h2><p>作用：源码映射，用于在编码出错时，迅速找到源码的出错地址。</p><p>在module.exports导出的对象中加入<code>devtool: &#39;source-map&#39;</code> // 增加映射文件可以帮我们调试源代码</p><ol><li><code>「source-map」</code>：源码映射 会标识错误的代码 打包后生成独立的文件 大而全 出错了会标识当前出错的列和行</li><li><code>「evl-source-map」</code>：不会生成单独的文件 但是可以显示行和列  </li><li><code>「cheap-module-source-map」</code>：不会产生列，产生单独的映射文件 (生产环境线上推荐这个) </li><li><code>「cheap-module-eval-source-map」</code>：不会产生文件 集成在打包后的文件中 不会产生列 (开发环境推荐使用这个)</li></ol><h2 id="watch-监视打包文件，当需要打包的文件发生改变的时候，就自动重新打包"><a href="#watch-监视打包文件，当需要打包的文件发生改变的时候，就自动重新打包" class="headerlink" title="watch 监视打包文件，当需要打包的文件发生改变的时候，就自动重新打包"></a><code>watch</code> 监视打包文件，当需要打包的文件发生改变的时候，就自动重新打包</h2><pre class=" language-JavaScript"><code class="language-JavaScript">watch: true,watchOptions: {    poll: 1000,   // 每秒检查一次变动    aggregateTimeout: 300,  // 当第一个文件更改，会在重新构建前增加延迟（修改文件防抖）    ignored: /node_modules/  // 对于某些系统，监听大量文件系统会导致大量的 CPU 或内存占用。这个选项可以排除一些巨大的文件夹，},</code></pre><h2 id="webpack-dev-server的使用"><a href="#webpack-dev-server的使用" class="headerlink" title="webpack-dev-server的使用"></a>webpack-dev-server的使用</h2><p>安装：<code>npm install webpack-dev-server -D</code></p><p>配置时就是在module.exports导出的对象中添加一个devServer属性,具体情况如下所示：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>        contentBase<span class="token punctuation">:</span><span class="token string">'./dist'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表示服务器起在这个目录下，因为我们打包生成的目录时dist，所以这里和其保持一致</span>        port<span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表示服务器时开在3000端口上的</span>        open<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//自动打开浏览器，</span>        progress<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token comment" spellcheck="true">//在打包编译的过程中会有一个进度条效果</span>        proxy<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这个属性时用来做跨域的。</span>            <span class="token string">'/api'</span><span class="token punctuation">:</span><span class="token string">'http://localhost:3000'</span><span class="token comment" spellcheck="true">//当前端的请求是以api开头的，就转到后面的这个地址上。</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="webpack跨域配置"><a href="#webpack跨域配置" class="headerlink" title="webpack跨域配置"></a>webpack跨域配置</h2><p>常见的跨域有三种情况，下面分别介绍在这三种情况下如何配置webpack</p><h3 id="设置代理：这种情况下，会起一个后端服务"><a href="#设置代理：这种情况下，会起一个后端服务" class="headerlink" title="设置代理：这种情况下，会起一个后端服务"></a>设置代理：这种情况下，会起一个后端服务</h3><p>服务端采用express框架搭建，服务端代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>情况<span class="token number">1</span>：app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/user'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'GouKu'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>情况<span class="token number">2</span>：后端请求并不是以api开头app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'GouKu'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app运行在3000端口上'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>；</code></pre><p>webpack默认端口是8080，所以可以在配置文件中设置一个代理</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span><span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>        contentBase<span class="token punctuation">:</span><span class="token string">'./dist'</span><span class="token punctuation">,</span>        open<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//情况1：</span>        proxy<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">'/api'</span><span class="token punctuation">:</span><span class="token string">'http://localhost:3000'</span><span class="token comment" spellcheck="true">//表示如果前端i请求的路径是以api开头的，都转到3000这个端口上去。</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//情况2：在这种情况下，虽然前端依然请求的是api/user,但是经过代理之后，给后端发出的请求就是将api删掉了，实际向后端请求的是/user</span>          proxy<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">'/api'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                    target<span class="token punctuation">:</span><span class="token string">'http://localhost:3000'</span><span class="token punctuation">,</span>                    reWritePath<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'^/api'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>index.js中是这样写的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'/api/user'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样每当请求的是以api开头的，就转到3000端口上去</span>xhr<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="只是前端去mock数据，并不涉及到后端"><a href="#只是前端去mock数据，并不涉及到后端" class="headerlink" title="只是前端去mock数据，并不涉及到后端"></a>只是前端去mock数据，并不涉及到后端</h3><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>        contentBase<span class="token punctuation">:</span><span class="token string">'./dist'</span><span class="token punctuation">,</span>        before：<span class="token keyword">function</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//启用一个钩子函数</span>            app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/user'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'GouKu'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="有服务端且不使用代理，直接从服务端开启webpack"><a href="#有服务端且不使用代理，直接从服务端开启webpack" class="headerlink" title="有服务端且不使用代理，直接从服务端开启webpack"></a>有服务端且不使用代理，直接从服务端开启webpack</h3><ol><li>首先下载安装webpack的中间键<code>npm install webpack-dev-middleware -D</code></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//server.js的内容如下：</span><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> middle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-dev-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">middle</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/user'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span>：<span class="token string">"GouKu"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app运行在3000端口上'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这样，在访问localhost：3000/api/user时也可以得到数据。    </span></code></pre><h2 id="热模块更新（hot-module-replacement-HMR）"><a href="#热模块更新（hot-module-replacement-HMR）" class="headerlink" title="热模块更新（hot module replacement HMR）"></a>热模块更新（hot module replacement HMR）</h2><p>使用热模块更新，可以在不刷新浏览器的情况下，只针对修改的文件做出样式活着是js上的变化。具体使用步骤如下：</p><ol><li>由于webpack自带着针对HMR的插件，所以，我们不必要再额外下载安装插件，只需要引入webpack即可。</li><li>在webpack.config.js中的devServer属性中添加上hot：true</li><li>在webpack.config.js中的plugins属性中实例化这个插件。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//setp1</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>        contentBase<span class="token punctuation">:</span><span class="token string">'./dist'</span><span class="token punctuation">,</span>        port<span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">,</span>        progress<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        open<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        hot<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//step2</span>    <span class="token punctuation">}</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//step3</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：</p><p>如果修改的是css文件，由于css-loader的关系，不需要在做额外的行为就可以针对修改的css样式浏览器做出反应，如果修改的是js文件，则需要在打包的入口文件中添加上以下代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span><span class="token punctuation">{</span>    module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>修改的js文件，（）<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>要执行的变化（业务代码）<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="webpack利用babel处理ES6语法"><a href="#webpack利用babel处理ES6语法" class="headerlink" title="webpack利用babel处理ES6语法"></a>webpack利用babel处理ES6语法</h2><ol><li>安装相应的loader</li></ol><p><code>npm install --save-dev babel-loader @babel/core</code></p><ol start="2"><li>在rules添加相应的规则</li></ol><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span><span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token string">'babel-loader'</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>在项目根路径下创建一个名字叫<strong>.babelrc</strong>的文件，里面的内容为</li></ol><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"preset"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：上述做法是babel官网的教程，但是这样的做法是不全面的，更全面的做法是，在上述基础上，接着如下操作：</p><ol start="4"><li>安装babel/polyfill  <code>npm install --save @babel/polyfill</code></li><li>在打包的入口js文件导入babel/polyfill <code>import &quot;@babel/polyfill&quot;;</code>这样其实就可以了，但是打包出来的js文件会非常大，所以还需要第6步的优化</li><li>修改.babelrc文件为：</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"preset"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>         targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>            edge<span class="token punctuation">:</span> <span class="token string">"17"</span><span class="token punctuation">,</span>            firefox<span class="token punctuation">:</span> <span class="token string">"60"</span><span class="token punctuation">,</span>            chrome<span class="token punctuation">:</span> <span class="token string">"67"</span><span class="token punctuation">,</span>            safari<span class="token punctuation">:</span> <span class="token string">"11.1"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//target里面写的内容是这些版本及以上的的浏览器对ES6语法都做了很好的兼容，所以，不需要再ployfill，就可以减少打包文件的体积。</span>        useBuiltIns<span class="token punctuation">:</span> <span class="token string">'usage'</span><span class="token comment" spellcheck="true">//只有用到的ES6语法方案才会被注入。</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><hr><p><strong>注意</strong>：上述的关于babel在webpack上的配置都是用来处理业务代码的，如果在实际开发中我们需要开发的是js类库这种不需要污染全局变量的化，就不能使用babel/polyfill了，而是要采用以下配置</p><ol><li>不需要在入口文件引入<code>import &quot;@babel/polyfill</code></li><li><code>npm install --save-dev @babel/plugin-transform-runtime</code></li><li><code>npm install --save @babel/runtime</code></li><li>修改.babelrc文件如下：</li></ol><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"absoluteRuntime"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"helpers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"regenerator"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"useESModules"</span><span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>此时打包的时候会报错，是因为还需要再<code>npm install --save @babel/runtime-corejs2</code>这样就不会报错了。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原型</title>
      <link href="/2019/05/09/%E5%8E%9F%E5%9E%8B/"/>
      <url>/2019/05/09/%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>原型的本质：对象</p><ol><li>所有的<strong>函数</strong>都有原型属性<strong>prototype</strong></li><li>默认情况下，prototype是一个对象</li><li>prototype中默认包含一个属性：constructor，该属性指向函数对象本身。</li></ol><h2 id="隐式原型"><a href="#隐式原型" class="headerlink" title="隐式原型"></a>隐式原型</h2><ol><li>所有对象都有一个隐式原型属性<code>__proto__</code></li><li>隐式原型是一个对象，指向创建该对象的构造函数的原型对象。</li><li>在查找对象成员时，如果在对象身上没有找到，就会去对象的隐式原型中查找。</li></ol><p><strong>所有函数的隐式原型都指向Function的原型</strong></p><p><strong>所有对象的隐式原型都指向Object的原型</strong></p><p><strong>总结</strong>：</p><p>原型对象，实例对象，构造函数之间的关系如图所示：</p><p><img src="/2019/05/09/原型/原型图解.PNG" alt></p><p><strong>特殊情况</strong>：</p><p><strong>Function的原型指向Function的隐式原型</strong>，即<code>Function.prototype===Function.__proto__</code></p><p><strong>Object原型的隐式原型指向null.</strong>即<code>Object.prototype.__proto__ ===null</code></p><p><strong>Tips</strong></p><ol><li><code>Object.__proto__ ===Function.prototype</code>:可以理解为Object这个函数(对象)是由Function函数实例化的的，所以就指向Function函数的原型对象。</li><li><code>Function.prototype.__proto__ ===Object.prototype</code>:可以理解为<code>Function.prototype</code>是一个对象，对而任何对象的隐式原型都指向Object函数的原型对象。</li></ol><p><strong>最后，关于Function，Object，自定义构造函数，实例对象的图解</strong></p><p><img src="/2019/05/09/原型/链条的全貌.jpg" alt></p><p>注释如下：</p><pre class=" language-javascript"><code class="language-javascript">自定义对象<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span>自定义构造函数<span class="token punctuation">.</span>prototype自定义构造函数<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span>Object<span class="token punctuation">.</span>prototypeObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span><span class="token keyword">null</span>自定义构造函数<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span>Function<span class="token punctuation">.</span>prototypeFunction<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Function<span class="token punctuation">.</span>prototypeFunction<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span>Object<span class="token punctuation">.</span>prototypeObject<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Function<span class="token punctuation">.</span>prototype</code></pre><p><strong>我的理解</strong></p><p><img src="/2019/05/09/原型/关系图.PNG" alt></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ol><li>由于原型<code>prototype</code>本身是对象，因此，它也有隐式原型，指向的规则不变；这样一来，从某个对象出发，依次寻找隐式原型的指向，将形成一个链条，该链条叫做原型链。</li><li>在查找对象成员时，若对象本身没有该成员，则会到原型链中查找。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES5基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="/2019/05/07/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2019/05/07/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>Vue实例有一个完整的生命周期，也就是从开始创建，初始化数据，编译模板，挂载DOM,渲染–&gt;更新–&gt;渲染，销毁等一系列过程，也就是Vue实例从创建到销毁的过程，就是生命周期。</p><p><img src="/2019/05/07/Vue生命周期/lifecycle.png" alt></p><h3 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是一个vue实例的第一个生命周期函数，在这个阶段，vue实例上的data中的数据和methods中的方法都不可以使用。</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是一个vue实例的第二个生命周期函数，要想使用vue实例上的data中的数落和methods中的方法，最早只能够在此阶段。在这里更改数据不会触发updated函数。</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token function">beforemount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是一个vue实例的第三个生命周期函数，在此阶段，已经在内存中生成了虚拟DOM树，但是尚未挂载到页面上，所以，此时页面上的元素中的数据还没有真正的替换过来，所以里面的内容还是之前写的插值表达式。</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是一个vue实例的第四个生命周期函数，也是vue实例创建阶段的最后一个生命函数，在这个阶段，模板已经挂载到了页面上，数据也进行了替换，不再是插值表达式。如果想要操作DOM元素，最早可在该阶段进行。</span></code></pre><h3 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span><span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是运行阶段的第一个生命周期函数，在vue实例中data中的数据发生改变的时候才会触发，但是，在这个阶段，虽然data中的数据已经改变，页面中的数据还是尚未改变的数据，此时，页面还没有同步新的数据。</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//但是，在这个阶段，data中的数据已经改变，页面中的数据已经改变，此时，页面已经同步新的数据。</span></code></pre><h3 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span><span class="token function">beforeDestory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在这个阶段，vue实例中的data中的数据和methods中的方法尚可以使用。</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token function">destoryed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在这个阶段,vue实例中的data中的数据和methods中的方法已经不可以使用。</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习过程中遇到的经典算法题</title>
      <link href="/2019/05/05/%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
      <url>/2019/05/05/%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><strong>说明</strong>：这个帖子旨在记录在学习JavaScript期间遇到的一些有趣的编程题。</p><h2 id="平衡括号"><a href="#平衡括号" class="headerlink" title="平衡括号"></a>平衡括号</h2><p><strong>题目描述</strong>：在编写代码并且编译时，难免会因为少写了一个’)’和被编译器报错。也就是说，编译器会去匹配括号是否匹配。当你输入了一个’(‘，很自然编译器回去检查你是否有另一个’)’符号与之匹配。如果所有的括号都能够成对出现，那么编译器是能够通过的。否则编译器会报错。</p><p><strong>算法描述</strong>：创建一个空栈，读取字符给定的字符串序列直到结尾，如果字符是开放符号’(‘,’[‘,’{‘则入栈，如果是’)’,’]’,’}’,首先判断当前栈是否为空，如果为空，则返回false，如果不为空，则判断栈顶元素是否是当前字符匹配的括号，如果不匹配，则返回false，如果匹配，则讲当前栈顶元素弹出。依次循环遍历完字符串，如果此时栈为空，则该字符串是一个括号平衡的字符串。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义一个栈</span><span class="token keyword">function</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//压栈</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>push<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>        items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//出栈</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pop<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回栈顶元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>peek <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">[</span>items<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断栈是否为空</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断函数</span><span class="token keyword">function</span> <span class="token function">balanceSigned</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'('</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token string">'['</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token string">'{'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> flag<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> flag<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token string">']'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> flag<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> flag<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token string">'}'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> flag<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'{'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> flag<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    flag <span class="token operator">=</span> stack<span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="硬币找零"><a href="#硬币找零" class="headerlink" title="硬币找零"></a>硬币找零</h2><p><strong>问题描述</strong>：给出要找零的钱数，以及可用的硬币面额，找到所需最少的硬币个数。</p><p><strong>算法描述</strong>：采用贪心算法，从面额最大的硬币开始，拿尽可能多的这种硬币找零，当无法再拿更多的这种面值的硬币时，开始拿第二大价值的硬币。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span>amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//coins是面值数组，排序是为了防止给定的面值集合数组是无序的。</span>    <span class="token comment" spellcheck="true">//amount是需要找零的面值</span>    coins<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//最终结果放在res里面</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//count是当前选择完后累计的钱数。</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">+</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>amount<span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">+</span><span class="token operator">=</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="大数加法"><a href="#大数加法" class="headerlink" title="大数加法"></a>大数加法</h2><p><strong>问题描述</strong>：JavaScript和任何一门语言一样，对其数值的范围有限制。如果我们想要对一个超大的整数进行加法运算，但是又想输出一般形式，那么使用 <code>+</code> 是无法达到的一旦数字超过 <code>Number.MAX_SAFE_INTEGER</code> 数字会被立即转换为科学计数法，并且数字精度相比以前将会有误差。在此时就需要自己实现一套加法算法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sumBigNumber</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>    temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">||</span> b<span class="token punctuation">.</span>length <span class="token operator">||</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span>a<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span>b<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用 ~~a 而不是Number(a)来进行格式转换。</span>    res <span class="token operator">=</span> <span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> res<span class="token punctuation">;</span>    temp <span class="token operator">=</span> temp <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^0+/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>算法解释</strong>：</p><ol><li>首先我们用字符串来保存大数，就保证了其在数学表示上不会发生变化。</li><li>初始化<code>res, temp</code>变量来保存中间计算的结果，在将两个字符串<code>split</code>为数组，以便我们进行每一位的运算。</li><li>循环的第一次就是进行 “个位” 的运算，将二者最末尾的两个数相加，由于每一位数字是0 - 9，所以需要进行进位，在进过取余数操作后，将结果保留在个位。</li><li>判断 <code>temp</code> 是否大于 10，若是则将 <code>temp</code> 赋值为 <code>true</code>。</li><li>在两个大数中的一个还有数字没有参与运算，或者前一次运算发生进位后，进行下一次循环。</li><li>接着除了对新的两个数字相加还要加上 <code>temp</code>，若上次发生了进位，则此时 <code>temp</code> 为 <code>true</code>，JavaScript因为存在隐式转换，所以 <code>true</code> 转换为 1，我们借用 JavaScript的类型转换，完成了逻辑上的逢10进1操作。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾回收机制</title>
      <link href="/2019/05/04/javascript%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/05/04/javascript%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="原理：找出不再继续使用的变量，然后释放掉其占用的内存。"><a href="#原理：找出不再继续使用的变量，然后释放掉其占用的内存。" class="headerlink" title="原理：找出不再继续使用的变量，然后释放掉其占用的内存。"></a>原理：找出不再继续使用的变量，然后释放掉其占用的内存。</h2><h2 id="策略1：标记清除"><a href="#策略1：标记清除" class="headerlink" title="策略1：标记清除"></a>策略1：标记清除</h2><p>当变量进入环境（可以理解为一个函数开始执行了）时，就将这个变量标记为“进入环境”，从逻辑上讲，不能释放掉进入环境的变量，而当变量离开环境的的时候，则将其标记为离开环境。</p><ol><li>垃圾收集器在运行的时候会给存储在内存中的<strong>所有变量都加上标记</strong>。</li><li>去掉<strong>环境中的变量以及被环境中的变量引用的变量</strong>的标记。</li><li>此后<strong>再被加上标记的变量</strong>将被视为准备删除的变量，因为环境中的变量已经无法访问到这些变量了。</li></ol><h2 id="策略2：引用计数"><a href="#策略2：引用计数" class="headerlink" title="策略2：引用计数"></a>策略2：引用计数</h2><p>跟踪记录每一个值的引用次数，当声明了一个变量并将一个引用类型值赋给该变量的时候，这个引用类型的引用次数就是1，如果同一个值又被赋值给另一个变量，这个值的引用次数加1.如果包含对这个值引用的变量又取得了另一个值，则这个值的引用次数减1，当这个值引用次数为0的时候，就可以将这个引用值所占的内存空间回收回来。</p><p><img src="/2019/05/04/javascript垃圾收集机制/引用计数.png" alt></p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>如果存在循环引用的情况，那么这个引用值占的空间就永远不会被回收。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES5基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子模型</title>
      <link href="/2019/05/04/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/05/04/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是盒子模型"><a href="#什么是盒子模型" class="headerlink" title="什么是盒子模型"></a>什么是盒子模型</h2><p>CSS盒子模型也叫框模型，具备内容(content),填充(padding),边框(border),边界(margin)这些属性，在CSS中，每一个元素都被视为一个盒子，且每一个盒子都有三个属性：</p><ol><li>border：元素的边框，用于将盒子的边缘与其他盒子分开。</li><li>margin：外边距，表示盒子的边缘与相邻盒子之间的距离，也称为页边空白。</li><li>padding：内边距，表示盒子内容和边框之间的空间。</li></ol><p>盒子的width和height指的是内容区域的宽度和高度，增加内边距，边框和外边距不会影响内容区域的尺寸，但是会增加盒子的总尺寸。</p><h2 id="盒子模型模式"><a href="#盒子模型模式" class="headerlink" title="盒子模型模式"></a>盒子模型模式</h2><h3 id="标准盒子模型：box-sizing-content-box"><a href="#标准盒子模型：box-sizing-content-box" class="headerlink" title="标准盒子模型：box-sizing:content-box"></a>标准盒子模型：box-sizing:content-box</h3><p>盒子总宽度=width+padding+border+margin</p><p>盒子的总高度=height+padding+border+margin</p><h3 id="IE盒子模型（怪异盒子模型）：box-sizing：border-box"><a href="#IE盒子模型（怪异盒子模型）：box-sizing：border-box" class="headerlink" title="IE盒子模型（怪异盒子模型）：box-sizing：border-box"></a>IE盒子模型（怪异盒子模型）：box-sizing：border-box</h3><p>盒子总宽度=width+margin；</p><p>盒子总高度=height+margin</p><p>用户自己设置的width=内容区域的宽度+border+padding</p><p>用户自己设置的height=内容区域的高度+border+padding</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圣杯布局和双飞翼布局</title>
      <link href="/2019/05/04/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
      <url>/2019/05/04/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>圣杯布局是一种常见的CSS布局，它要求：</p><ol><li>底部和顶部各自占领屏幕的全部宽度</li><li>上下部之间是一个三栏布局</li><li>三栏布局两侧宽度不变，中间部分自动填充整个区域</li><li>中间部分的高度是三栏中高度最高区域的高度</li></ol><p>下面介绍两种实现方式：</p><h3 id="浮动实现"><a href="#浮动实现" class="headerlink" title="浮动实现"></a>浮动实现</h3><pre><code>  &lt;style&gt;        .header,.footer{            height: 200px;            width: 100%;            background: #f40;        }        .footer{            clear:both;        }        .container{            padding-left:200px;&#x2F;&#x2F;这个就是左边盒子将来的宽度            padding-right:300px;&#x2F;&#x2F;这个就是右边盒子将来的宽度        }        .container div{            float: left;            position: relative;&#x2F;&#x2F;将所有的盒子设为相对定位        }        .mid{            width: 100%;            background: yellow;        }        .left{            width: 200px;            background: skyblue;            margin-left: -100%;&#x2F;&#x2F;很关键，margin-left：-100%是按照父盒子的宽度来计算的            left:-200px;&#x2F;&#x2F;很关键        }        .right{            width: 300px;            background: cyan;            margin-right:-300px;&#x2F;&#x2F;很关键        }&lt;&#x2F;style&gt;&lt;div class=&quot;header&quot;&gt;这里是头部&lt;&#x2F;div&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;mid&quot;&gt;中间部分&lt;&#x2F;div&gt;        &lt;div class=&quot;left&quot;&gt;左边&lt;&#x2F;div&gt;        &lt;div class=&quot;right&quot;&gt;右边&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class=&quot;footer&quot;&gt;这里是底部&lt;&#x2F;div&gt;</code></pre><h3 id="flex弹性布局实现"><a href="#flex弹性布局实现" class="headerlink" title="flex弹性布局实现"></a>flex弹性布局实现</h3><p>弹性布局就是给外面的container盒子设置display：flex；然后左右固定宽度，中间的盒子设置flex：1即可。</p><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>双飞翼布局是在middle的div里又插入一个div，通过调整内部div的margin值，实现中间栏自适应，内容写到内部div中</p><pre><code>&lt;style&gt;     .hd{            height:50px;            background: #666;            text-align: center;        }        .middle{            float:left;            width:100%;&#x2F;*左栏上去到第一行*&#x2F;            height:100px;            background:blue;        }        .left{            float:left;            width:180px;            height:100px;            margin-left:-100%;            background:#0c9;        }        .right{            float:left;            width:200px;            height:100px;            margin-left:-200px;            background:#0c9;        }        &#x2F;*给内部div添加margin，把内容放到中间栏，其实整个背景还是100%*&#x2F;        .inside{            margin:0 200px 0 180px;            height:100px;        }        .footer{            clear:both; &#x2F;*记得清楚浮动*&#x2F;            height:50px;            background: #666;            text-align: center;        }&lt;&#x2F;style&gt; &lt;div class=&quot;hd&quot;&gt;header&lt;&#x2F;div&gt;    &lt;div class=&quot;middle&quot;&gt;        &lt;div class=&quot;inside&quot;&gt;middle&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class=&quot;left&quot;&gt;left&lt;&#x2F;div&gt;    &lt;div class=&quot;right&quot;&gt;right&lt;&#x2F;div&gt;    &lt;div class=&quot;footer&quot;&gt;footer&lt;&#x2F;div&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS控制前端图片HTTP请求的情况</title>
      <link href="/2019/05/04/CSS%E6%8E%A7%E5%88%B6%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87HTTP%E8%AF%B7%E6%B1%82%E7%9A%84%E6%83%85%E5%86%B5/"/>
      <url>/2019/05/04/CSS%E6%8E%A7%E5%88%B6%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87HTTP%E8%AF%B7%E6%B1%82%E7%9A%84%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="隐藏图片"><a href="#隐藏图片" class="headerlink" title="隐藏图片"></a>隐藏图片</h2><pre><code>&lt;img src=&#39;xxx.jpg&#39; style=&#39;display:none&#39;&gt;</code></pre><p><strong>结论</strong>：产生HTTP请求，此外使用visiblity：hidden的时候也会产生请求。</p><h2 id="重复图片"><a href="#重复图片" class="headerlink" title="重复图片"></a>重复图片</h2><pre><code>&lt;img src=&#39;xxx.jpg&#39;&gt;&lt;img src=&#39;xxx.jpg&#39;&gt;</code></pre><p><strong>结论</strong>：所有浏览器对重复的资源都只发出一次请求。</p><h2 id="重复背景"><a href="#重复背景" class="headerlink" title="重复背景"></a>重复背景</h2><pre><code>&lt;style&gt;    .test1{background:url(xxx.jpg)}    .test2{background:url(xxx.jpg)}&lt;&#x2F;style&gt;&lt;div class=&#39;test1&#39;&gt;&lt;&#x2F;div&gt;&lt;div class=&#39;test2&#39;&gt;&lt;&#x2F;div&gt;</code></pre><p><strong>结论</strong>：所有浏览器都只发出一次HTTP请求</p><h2 id="不存在的元素的背景"><a href="#不存在的元素的背景" class="headerlink" title="不存在的元素的背景"></a>不存在的元素的背景</h2><pre><code>&lt;style&gt;    .test1{background:url(xxx.jpg)}    .test2{background:url(xxx.png)}&lt;&#x2F;style&gt;&lt;div class=&#39;test1&#39;&gt;&lt;&#x2F;div&gt;</code></pre><p><strong>结论</strong>：背景仅在应用的元素在页面中存在的时候，才会发出请求。</p><h2 id="隐藏元素的背景"><a href="#隐藏元素的背景" class="headerlink" title="隐藏元素的背景"></a>隐藏元素的背景</h2><pre><code>&lt;style&gt;    .test1{        background:url(xxx.jpg);        display:none;    }    .test2{background:url(xxx.png)}&lt;&#x2F;style&gt;&lt;div class=&#39;test1&#39;&gt;&lt;&#x2F;div&gt;</code></pre><p><strong>结论</strong>：Chrome会为display：none；的元素发出请求，但是fireFox和opera不会为display：none；的元素发出HTTP请求。</p><h2 id="多重背景"><a href="#多重背景" class="headerlink" title="多重背景"></a>多重背景</h2><pre><code>&lt;style&gt;    .test1{        background:url(xxx.jpg);    }    .test1{background:url(xxx.png)}&lt;&#x2F;style&gt;&lt;div class=&#39;test1&#39;&gt;&lt;&#x2F;div&gt;</code></pre><p><strong>结论</strong>：因为下面的样式把上面的掩盖掉，所以只会发出一次HTTP请求。</p><h2 id="hover的背景加载"><a href="#hover的背景加载" class="headerlink" title="hover的背景加载"></a>hover的背景加载</h2><pre><code>&lt;style&gt;    .test1{        background:url(xxx.jpg);    }    .test1:hover{background:url(xxx.png)}&lt;&#x2F;style&gt;&lt;div class=&#39;test1&#39;&gt;&lt;&#x2F;div&gt;</code></pre><p><strong>结论</strong>：触发hover时，才会有对应的HTTP请求，如果没有触发，默认只会有请求默认的背景图片</p><h2 id="JS中innerHTML中的图片"><a href="#JS中innerHTML中的图片" class="headerlink" title="JS中innerHTML中的图片"></a>JS中innerHTML中的图片</h2><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;       var el = document.createElement(&#39;div&#39;);       el.innerHTML = &#39;&lt;img src=&quot;haorooms.jpg&quot; /&gt;&#39;;   &lt;/script&gt;  </code></pre><p><strong>结论</strong>：只有Opera不会立刻发出请求，其余浏览器会发出HTTP请求。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串常用方法</title>
      <link href="/2019/04/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="length"><a href="#length" class="headerlink" title=".length"></a>.length</h3><p>返回字符换长度</p><h3 id="charAt-索引"><a href="#charAt-索引" class="headerlink" title=".charAt(索引)"></a>.charAt(索引)</h3><p>返回指定索引位置的字符，如果索引超过了字符串长度会返回空串</p><h3 id="charCodeAt-索引"><a href="#charCodeAt-索引" class="headerlink" title=".charCodeAt(索引)"></a>.charCodeAt(索引)</h3><p>返回给定索引位置的字符的字符编码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">chaAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的是字符‘e’</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的是一个空串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的是字符‘e’的字符编码101</span></code></pre><h3 id="concat-字符串1，字符串2…"><a href="#concat-字符串1，字符串2…" class="headerlink" title=".concat(字符串1，字符串2…)"></a>.concat(字符串1，字符串2…)</h3><p>返回的是拼接之后的新的字符串</p><h3 id="indexOf-要找的字符，开始的位置（可选项）"><a href="#indexOf-要找的字符，开始的位置（可选项）" class="headerlink" title=".indexOf(要找的字符，开始的位置（可选项）)"></a>.indexOf(要找的字符，开始的位置（可选项）)</h3><p>返回的是从开始的位置之后第一个出现目标字符串的位置，没有找到就返回-1</p><h3 id="lastIndexOf-要找的字符，开始的位置（可选项）"><a href="#lastIndexOf-要找的字符，开始的位置（可选项）" class="headerlink" title=".lastIndexOf(要找的字符，开始的位置（可选项）)"></a>.lastIndexOf(要找的字符，开始的位置（可选项）)</h3><p>返回的是目标字符最后出现的位置，没有就返回-1</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出字符串‘hello，world！’</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出3</span></code></pre><h3 id="replace-原来的字符串，新的字符串"><a href="#replace-原来的字符串，新的字符串" class="headerlink" title=".replace(原来的字符串，新的字符串)"></a>.replace(原来的字符串，新的字符串)</h3><p>将原来的字符串用新的字符串代替，<strong>如果原来字符串出现了多次，只会替换第一个出现的，并不会全局替换</strong></p><h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h3><p>去掉字符串首位两端的空格</p><h3 id="split-分隔符，保留下来的个数（可选）"><a href="#split-分隔符，保留下来的个数（可选）" class="headerlink" title=".split(分隔符，保留下来的个数（可选）)"></a>.split(分隔符，保留下来的个数（可选）)</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">' hello '</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出字符串‘hexlo’</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出首尾没有空格的字符串‘hello’</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">'h,e,l,l,o'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出一个数组['h','e','l','l',''o];</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出数组['h','e']</span></code></pre><h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title=".toLowerCase"></a>.toLowerCase</h3><p>将字符串全部换为小写</p><h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a>toUpperCase</h3><p>将字符串全部换为大写</p><h3 id="localeCompare-要进行比较的字符串"><a href="#localeCompare-要进行比较的字符串" class="headerlink" title=".localeCompare(要进行比较的字符串)"></a>.localeCompare(要进行比较的字符串)</h3><ol><li>如果字符串在字母表中应该排在参数前，则返回一个负数</li><li>如果字符串等于参数，返回0；</li><li>如果字符串应该排在参数之后，返回一个正数</li></ol><h3 id="slice-substring-substr方法"><a href="#slice-substring-substr方法" class="headerlink" title="slice,substring substr方法"></a>slice,substring substr方法</h3><p>这三个方法都会返回被操作字符串的一个子字符串，而且也都可以接收一个或者两个参数。其中，第一个参数指定子字符串的开始位置，第二个参数是可选的，用于指定子字符串结束的位置。具体而言，<strong>slice和subString的第二个参数指定的是子字符串最后一个字符后面的位置，而substr的第二个参数指定的是返回字符串的长度</strong>。如果没有给这些方法传入第二个参数，则将字符串的末尾作为结束的位置。</p><p>但是，如果在给这三个方法传入的参数是负值的时候，则情况不尽相同，具体而言：</p><ol><li>slice：将传入的负值与字符串长度相加，转为正值</li><li>substr：将负的第一个参数加上字符串的长度，而将负的第二个参数转为0</li><li>substring：将所有负的参数转为0，但是该方法以参数中较小的数作为开始的位置，较大的那个数作为结束的位置。</li></ol><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello, world!'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出‘ello, world!’</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出‘ello, world!’</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出‘ello, world!’</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出从第二个字符开始，到第六个字符结束的中间的字符串</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出从第二个字符开始，到第六个字符结束的中间的字符串</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出从第二个字符开始往后的长度为6的字符串</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于str.slice(13-5)=>str.slice(8)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于str.slice(13-5)=>str.slice(8)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于str.substring(5, 0)=>str.substring(0,5)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES5基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组常用方法</title>
      <link href="/2019/04/26/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/26/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Array-isArray-对象"><a href="#Array-isArray-对象" class="headerlink" title="Array.isArray(对象)"></a>Array.isArray(对象)</h3><p>判断这个对象是不是一个数组</p><h3 id="concat-数组"><a href="#concat-数组" class="headerlink" title=".concat(数组)"></a>.concat(数组)</h3><p>返回一个拼接的新数组</p><h3 id="push-值"><a href="#push-值" class="headerlink" title=".push(值)"></a>.push(值)</h3><p>在原数组的最后面添加上这个值，返回值是新数组的长度</p><h3 id="unshift-值"><a href="#unshift-值" class="headerlink" title=".unshift(值)"></a>.unshift(值)</h3><p>在原数组的最前面添加上这个值，返回值是新数组的长度</p><h3 id="pop"><a href="#pop" class="headerlink" title=".pop"></a>.pop</h3><p>将原数组最后一个值弹出，返回值是弹出的这个值</p><h3 id="shift"><a href="#shift" class="headerlink" title=".shift"></a>.shift</h3><p>将原数组第一个值弹出，返回值是弹出的这个值。</p><h3 id="reverse"><a href="#reverse" class="headerlink" title=".reverse"></a>.reverse</h3><p>将原数组逆序，返回值是经过排序之后的数组（是数组本身）</p><h3 id="sort"><a href="#sort" class="headerlink" title=".sort"></a>.sort</h3><p>将原来数组按一定顺序排列，不稳定，可以在这个方法中传入一个比较函数。返回值是经过排序之后的数组。</p><h3 id="slice-开始的索引，结束的索引"><a href="#slice-开始的索引，结束的索引" class="headerlink" title=".slice(开始的索引，结束的索引)"></a>.slice(开始的索引，结束的索引)</h3><p>将原来数组从开始的索引到结束的索引的中间那一段数组内容截取出来，放在新数组中，这个操作本身不影响原来的数组。</p><h3 id="splice"><a href="#splice" class="headerlink" title=".splice"></a>.splice</h3><p>splice方法传入的参数个数取决于使用这方法所要达到的效果，具体而言，就是：</p><ol><li>删除：传入两个参数，起始位置，删除的个数</li><li>插入：传入三个参数，插入位置，0（表示不删除任何元素），要插入的元素</li><li>替换：传入三个参数，替换位置，要替换的元素的个数，要替换的元素</li></ol><p><strong>注意</strong>：</p><p>splice方法对于数组的操作会影响原来数组</p><h3 id="find"><a href="#find" class="headerlink" title=".find"></a>.find</h3><p>接收一个方法作为参数，方法内部会返回一个条件，find会遍历数组的所有元素，符合这个条件的元素会被返回，如果遍历完整个数组都没有符合条件的元素，会返回undefined</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> item <span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    这个函数会返回数组中值是<span class="token number">20</span>数</code></pre><h3 id="findIndex"><a href="#findIndex" class="headerlink" title=".findIndex"></a>.findIndex</h3><p>作用和find方法类似，但是不同的是，这个方法返回的是数组中符合条件的元素在数组中的索引。</p><h3 id="join-拼接符"><a href="#join-拼接符" class="headerlink" title=".join(拼接符)"></a>.join(拼接符)</h3><p>返回一个将数组中所有元素使用拼接符拼接起来的字符串</p><h3 id="every，filter，forEach，map，some"><a href="#every，filter，forEach，map，some" class="headerlink" title="every，filter，forEach，map，some"></a>every，filter，forEach，map，some</h3><p>这几个方法都会遍历整个数组，但是，就其作用而言，却不尽相同，具体而言：</p><ol><li>every：接收一个函数作为参数，这个函数的第一个参数是元素的值，第二个参数是元素的索引，every会遍历整个数组，只有当数组中的每一个元素都满足参数函数的条件时，才会返回true</li><li>some：作用和every相似，但不需要数组中每一个元素都满足条件，只要存在一个元素满足这个条件就返回true。</li><li>filter：根据传入的参数函数对数组中每一个元素进行过滤判断，返回的值是所有满足条件的元素组成的新数组</li><li>forEach：对数组中每一个元素遍历执行参数函数中的操作。没有返回值</li><li>map:数组中每一个元素都要执行这个函数，并将执行后的结果放在一个新数组中返回。</li></ol><p><strong>上述所有遍历数组的方法均不会改变原来数组中元素的值。</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES5基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AMD/CMD和CommonJS的区别</title>
      <link href="/2019/04/26/AMD/"/>
      <url>/2019/04/26/AMD/</url>
      
        <content type="html"><![CDATA[<ol><li>commonjs是用在服务器端的，是同步的，如node.js</li><li>amd,cmd是用在浏览器端的，是异步的。其中amd先提出来，cmd是根据commonjs和amd的基础上提出来的。</li></ol><h2 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h2><p>Commonjs是服务器端的模块规范，Node.js采用了这个规范</p><p>根据Commonjs规范，一个单独的文件就是一个模块，加载模块使用require方法，该方法读取文件并执行，最后，返回文件的内部expots对象。</p><p>CommonJS加载模块是同步的，只有加载完成之后才可以执行后面的操作。像Node.js主要用于服务器的编写，加载的模块文件一般都已经存在本地硬盘上了，所以加载起来比较快。不用考虑异步加载的方式。所以，CommonJS规范比较适用。但是如果是在浏览器端，要从服务器加载模块，就必须是异步模式，所以才有了AMD,CMD解决方案。</p><h2 id="AMD-CMD"><a href="#AMD-CMD" class="headerlink" title="AMD/CMD"></a>AMD/CMD</h2><p>AMD是“Asynchronous Module Definition”的缩写，意思就是“异步模块定义”，它采用异步方式加载模块，模块的加载不影响它后面语句的运行，所有依赖的模块的语句，都定义在一个回调函数中，等到加载完之后，这个回调函数才会运行。</p><p>AMD也采用了require语句加载模块，但是不同于CommonJS</p><p>主要由两个JavaScript库实现了AMD规范。require.js和curl.js</p><p><strong>相同点</strong>：都是异步加载</p><p>AMD推崇前置依赖，在定义模块的时候就要声明其依赖的模块。AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。</p><p>CMD推崇后置依赖，只有在用到某个模块的时候才去require。CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</p><p>对于依赖的模块，AMD是提前执行的，CMD是延迟执行的。</p><p>CMD在AMD基础上改进，可按需加载，预先下载代码，但并没有立即执行，即“就近书写，延迟执行”</p><pre class=" language-javascript"><code class="language-javascript">AMD<span class="token comment" spellcheck="true">//a.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a.js'</span>执行<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        hello<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//b.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b.js执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        hello<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//main.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'main.js执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#b'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        b<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">CMD<span class="token comment" spellcheck="true">//a.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a.js执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        hello<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b.js执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        hello<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//main.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'main.js执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#b'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC</title>
      <link href="/2019/04/22/cssBFC/"/>
      <url>/2019/04/22/cssBFC/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h2><p>BFC(Block Formatting Context)：格式化上下文，是Web页面中盒模型布局的css渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器。它决定了其子元素如何定位，以及与其他元素的相互作用关系。</p><h2 id="BFC的生成"><a href="#BFC的生成" class="headerlink" title="BFC的生成"></a>BFC的生成</h2><p>满足下列CSS声明之一的元素就会生成BFC</p><ol><li>根元素或者其他包含它的元素</li><li>float的值不为none</li><li>overflow不为visible的值</li><li>position不为static</li><li>display的值为inline-block，table-cell，table-caption</li><li>元素的display为flex或者inline-flex</li></ol><h2 id="BFC的布局规则"><a href="#BFC的布局规则" class="headerlink" title="BFC的布局规则"></a>BFC的布局规则</h2><ol><li>内部的元素会在垂直方向一个接一个的排列，可以理解为是BFC中的一个常规流</li><li>元素垂直方向的距离由margin决定，即同属于一个BFC的两个相邻的盒子的margin可能会发生重叠</li><li>每个元素的左外边距与包含块的左外边距相接触，即使存在浮动的情况下也是如此，这说明BFC的子元素不会超出它的包含块</li><li>BFC区域不会与float元素区域重叠</li><li>计算BFC高度的时候，浮动的子元素也参与计算.</li><li>BFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。</li></ol><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><h3 id="解决margin塌陷"><a href="#解决margin塌陷" class="headerlink" title="解决margin塌陷"></a>解决margin塌陷</h3><h3 id="清除浮动问题"><a href="#清除浮动问题" class="headerlink" title="清除浮动问题"></a>清除浮动问题</h3><h3 id="解决侵占浮动元素的问题——-gt-两栏布局"><a href="#解决侵占浮动元素的问题——-gt-两栏布局" class="headerlink" title="解决侵占浮动元素的问题——-&gt;两栏布局"></a>解决侵占浮动元素的问题——-&gt;两栏布局</h3><p>浮动的元素会脱离文档流，然后覆盖在文档流元素上，当一个元素浮动，另外一个不浮动的时候，浮动的元素会因为脱离文档流而盖在不浮动的元素上。所以我们为非浮动元素建立BFC环境，根据BFC的不和float box重叠的规则，就会解决侵占元素问题。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtual DOM及diff算法</title>
      <link href="/2019/04/22/vdom/"/>
      <url>/2019/04/22/vdom/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是virtual-dom？"><a href="#什么是virtual-dom？" class="headerlink" title="什么是virtual dom？"></a>什么是virtual dom？</h2><p>从本质上而言，Vdom只是一个用于描述DOM节点的原生JS对象，并且最少包括tag，props，和children三个属性，下面是一个经典的Vdom例子：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    tag<span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>    props<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"Hello World"</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span>            tag<span class="token operator">:</span> <span class="token string">"ul"</span><span class="token punctuation">,</span>            props<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                tag<span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>                props<span class="token operator">:</span> <span class="token punctuation">{</span>                    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    class<span class="token operator">:</span> <span class="token string">"li-1"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"第"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>Vdom和实际的dom对象有着意一一对应的关系，上述的Vdom就是由以下HTML生成的</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    Hello World    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>li-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            第1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h2 id="当数据发生变化时，Vue如何更新节点？"><a href="#当数据发生变化时，Vue如何更新节点？" class="headerlink" title="当数据发生变化时，Vue如何更新节点？"></a>当数据发生变化时，Vue如何更新节点？</h2><p>渲染真实的DOM的开销是很庞大的，如果直接渲染到真实的DOM上会引起整个DOM树的重排重绘，通过diff算法来实现只更新一小块DOM而不更新整个DOM。首先，根据真实的DOM生成一颗Virtual DOM。当vitrual DOM的某个节点的数据发生变化的时候会生成一个新的VNode。(vue.js中采用createElement方法来创建Vnode)。然后Vnode和old vnode做对比，发现有不一样的地方就修改在真实的DOM上，然后使old Vnode的值为Vnode。</p><p>diff算法的过程就是调用名为patch的函数，比较新旧节点，一边比较，一边给真实的节点打补丁。</p><p><strong>注意</strong></p><ol><li>Vnode和old vnode都是对象</li><li>在采用diff算法进行新旧节点比较的时候，比较只会在同一层级上比较，不会跨层级去比较。</li></ol><p>patch函数有两个参数，Vnode和old Vnode也就是新旧俩个虚拟节点，具体而言有两个步骤：</p><ol><li>判断两个节点是否值得比较，值得比较就调用patch vnode算法（此处调用的是sameVnode函数）</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sameVnode <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        a<span class="token punctuation">.</span>key <span class="token operator">===</span> b<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>            <span class="token punctuation">(</span>                a<span class="token punctuation">.</span>tag <span class="token operator">===</span> b<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span>                a<span class="token punctuation">.</span>isComment <span class="token operator">===</span> b<span class="token punctuation">.</span>isComment <span class="token operator">&amp;&amp;</span>                <span class="token function">isDef</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">isDef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">sameInputType</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>            <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>                <span class="token function">isTrue</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>isAsyncPlaceholder<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                a<span class="token punctuation">.</span>asyncFactory <span class="token operator">===</span> b<span class="token punctuation">.</span>asyncFactory <span class="token operator">&amp;&amp;</span>                <span class="token function">isUndef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>asyncFactory<span class="token punctuation">.</span>error<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>sameVnode的逻辑比较简单，如果两个vnode的key不相等，则是不等的，否则继续判断tag值，data等类型是否相等</code></pre><ol><li>不值得比较就直接用VNode替换掉old Vnode</li></ol><p>patchVnode做的事情：</p><ol><li>找到old vnode对应的真实Vdom，称为el</li><li>如果oldVnode===vnode，他们的引用一致，可以认为没有变化，则直接return</li><li>如果两者都有文本节点，且文本节点不相等，则将el的文本节点设置为vnode的文本节点</li><li>如果新节点有子节点而oldnode没有子节点，则将vnode的子节点真实化后添加到el上</li><li>如果新节点没有子节点而oldnode有子节点，则将el的子节点删除掉</li><li>如果两者都有子节点，则调用updatechildren函数比较子节点。</li></ol><p>updateChildren函数的作用</p><ol><li>处理头部的同类型节点：即oldStart和newStart指向同类节点的情况。—-&gt;将oldStart和newStart向后移动一位</li><li>处理尾部的同类型节点：即oldEnd和newEnd指向同类节点的情况。—-&gt;将oldEnd和newEnd向前移动一位。</li><li>处理头尾/尾头的同类型节点：即oldStart和newEnd以及oldEnd和newStart指向同类节点的情况。</li></ol><p><img src="/2019/04/22/vdom/0.png" alt></p><p>节点2后移到oldEnd指向的节点（节点9）的后面，移动后标记该节点，并将oldstart后移一位，newEnd前移一位，变为：</p><p><img src="/2019/04/22/vdom/1.png" alt></p><p>同样地，节点9也是类似的处理，处理完之后成了下面这样</p><p><img src="/2019/04/22/vdom/3.png" alt></p><p>newStart来到了节点11的位置，在oldVdom中找不到节点11，说明它是新增的。那么就创建一个新的节点，插入DOM树，插到什么位置？插到oldStart指向的节点（即节点3）前面，然后将newStart后移1位标记为已处理（注意oldVdom中没有节点11，所以标记过程中它的指针不需要移动），处理之后如下图</p><p><img src="/2019/04/22/vdom/4.png" alt></p><p>处理更新的节点：</p><p>经过第（4）步之后，newStart来到了节点7的位置，在oldVdom中能找到它而且不在指针位置（<strong>查找oldVdom中oldStart到oldEnd区间内的节点</strong>），说明它的位置移动了，那么需要在DOM树中移动它，移到哪里？移到oldStart指向的节点（即节点3）前面。<strong>与此同时将节点标记为已处理</strong>    </p><p><img src="/2019/04/22/vdom/6.png" alt></p><p>处理之后就成了下面这样：</p><p><img src="/2019/04/22/vdom/7.png" alt></p><p>处理需要删除的节点：</p><p>经过前面处理之后，newStart跨过了newEnd，它们相遇啦！而这个时候，oldStart和oldEnd还没有相遇，说明这2个指针之间的节点（包括它们指向的节点，即上图中的节点7、节点8）是此次更新中被删掉的节点。</p><p>OK，那我们在DOM树中将它们删除，<strong>再回到前面我们对节点7做了标记，为什么标记是必需的？标记的目的是告诉Vue它已经处理过了，是需要出现在新DOM中的节点，不要删除它，所以在这里只需删除节点8。</strong></p><p><strong>在应用中也可能会遇到oldVdom的起止点相遇了，但是newVdom的起止点没有相遇的情况，这个时候需要对newVdom中的未处理节点进行处理，这类节点属于更新中被加入的节点，需要将他们插入到DOM树中。</strong></p><p><img src="/2019/04/22/vdom/10.png" alt></p><h2 id="key的作用"><a href="#key的作用" class="headerlink" title="key的作用"></a>key的作用</h2><p>key的作用是给每个节点做一个唯一标识，从而在diff算法执行时更快的找到对应的节点，提高diff速度。</p><p>在交叉对比的时候，当新节点跟旧节点头尾交叉对比没有结果的时候，会根据新节点的key去对比旧节点数组中的key，从而找到相应的旧节点，如果没找到就认为是新增加一个节点，而如果没有key，就会采用遍历查找的方式去找对应的旧节点。</p>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> diff算法 </tag>
            
            <tag> VDom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生CSS画三角形</title>
      <link href="/2019/04/16/CSS%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
      <url>/2019/04/16/CSS%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><p><strong>先将一个盒子的width和height都设置为0px，这一步是最关键的</strong></p><h3 id="画尖朝上的红色三角形"><a href="#画尖朝上的红色三角形" class="headerlink" title="画尖朝上的红色三角形"></a>画尖朝上的红色三角形</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#f00</span><span class="token punctuation">}</span></code></pre><h3 id="画尖朝下的红色三角形"><a href="#画尖朝下的红色三角形" class="headerlink" title="画尖朝下的红色三角形"></a>画尖朝下的红色三角形</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#f00</span><span class="token punctuation">}</span></code></pre><h3 id="画尖朝左的红色三角形"><a href="#画尖朝左的红色三角形" class="headerlink" title="画尖朝左的红色三角形"></a>画尖朝左的红色三角形</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#f00</span><span class="token punctuation">}</span></code></pre><h3 id="画尖朝右的红色三角形"><a href="#画尖朝右的红色三角形" class="headerlink" title="画尖朝右的红色三角形"></a>画尖朝右的红色三角形</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#f00</span><span class="token punctuation">}</span></code></pre><h3 id="画左上方的直角三角形"><a href="#画左上方的直角三角形" class="headerlink" title="画左上方的直角三角形"></a>画左上方的直角三角形</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#f00</span><span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">}</span></code></pre><h3 id="画左下方的直角三角形"><a href="#画左下方的直角三角形" class="headerlink" title="画左下方的直角三角形"></a>画左下方的直角三角形</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="画右上方直角三角形"><a href="#画右上方直角三角形" class="headerlink" title="画右上方直角三角形"></a>画右上方直角三角形</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#f00</span><span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="画右下方直角三角形"><a href="#画右下方直角三角形" class="headerlink" title="画右下方直角三角形"></a>画右下方直角三角形</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">100</span>px solid <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖与节流</title>
      <link href="/2019/04/16/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
      <url>/2019/04/16/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>当持续触发事件时，一定时间段内没有再触发时间，时间处理函数才会执行一次，如果设定的时间到来之前，有一次触发了事件，就重新开始延时。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>timeout <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理函数</span>    <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 滚动事件</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>注</strong>：这个按钮所注册的点击事件只有在1s之内没有再次点击该按钮才会执行弹框，如果点击了按钮之后1s之内再次点击按钮，则会以第二次按钮点击的时间为基准，往后延迟1s后执行。</p><h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p>当持续触发时间时，保证一定时间段内只调用一次时间处理函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> processor<span class="token operator">=</span><span class="token punctuation">{</span>        timeOutId <span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>        performProcessing<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        process<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeOutId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            that<span class="token punctuation">.</span>timeOutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                that<span class="token punctuation">.</span><span class="token function">performProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> processor<span class="token punctuation">.</span>process<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>processor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注</strong>：这个按钮的点击事件无论点击多少次，1s内只执行一次。</p><h2 id="函数防抖与函数节流的区别"><a href="#函数防抖与函数节流的区别" class="headerlink" title="函数防抖与函数节流的区别"></a>函数防抖与函数节流的区别</h2><p>防抖的函数不保证一段时间内执行一次，如果再该段时间里面该事件持续被触发，那么这个事件永远不会执行。</p><p>函数节流则时一段事件内无论触发多少次事件，都只会响应一次该事件。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6异步操作</title>
      <link href="/2019/04/11/ES6%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/04/11/ES6%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h1><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><p>async函数返回的是一个promise对象，如果在函数中return一个直接量，saync会把这个直接量通过Promise.resolve()封装成一个Promise对象。，如果async函数没有返回值，就会封装成async(undefined)</p><p><strong>个人理解</strong>：async函数在调用完毕之后，不管函数本身有没有设置返回值，都会自动返回一个Promise对象。如果async函数有设置返回值，则返回的Promise对象是Promise.resolve(返回值)，如果async本身没有设置返回值，则返回的Promise对象是Promise.resolve(undefined).</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> async/await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript运行机制</title>
      <link href="/2019/04/11/EventLoop/"/>
      <url>/2019/04/11/EventLoop/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么JavaScript是单线程"><a href="#为什么JavaScript是单线程" class="headerlink" title="为什么JavaScript是单线程"></a>为什么JavaScript是单线程</h2><p>JavaScript的单线程，与它的用途有关，作为浏览器脚本语言，JavaScript的主要用途是为了与用户互动以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如：假定JavaScript同时又两个线程，一个线程在某个DOM节点上添加内容，一个线程要删除这个节点，这时，浏览器就不知道该以哪个线程为准。</p><h2 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h2><p>同步任务：在主线程上排队执行额任务，只有前一个任务执行完毕之后才能执行下一个任务。</p><p>异步任务：不进入主线程，而是进入任务队列的任务。</p><p><strong>注</strong>：除了放置异步任务的事件，任务队列还可以放置定时器任务。</p><h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><p>任务队列是一个事件的队列，主线程读取任务队列，就是读取里面的事件。</p><p>主线程从“任务队列”中读取事件，这种过程是循环不断的，所以整个过程的运行机制又称为EventLoop</p><p>不同的任务源会被分配到不同的Task队列中去，任务源又可以分为微任务(miscrotask)和宏任务(mascrotask)</p><p><img src="/2019/04/11/EventLoop/宏任务和微任务.PNG" alt></p><p>EventLoop循环过程如下：</p><ol><li>执行完同步代码，当所有同步代码均被执行完毕之后，执行栈清空，查询是否有异步代码</li><li>在macrotask队列中选择最早的那一个，如果没有可选的任务，就跳到下面的microtask队列中</li><li>将上面选中的macrotask设置为正在运行的task</li><li>运行被选中的task</li><li>运行完毕之后，将eventloop中的current running task设置为null</li><li>从task队列中移除前面运行的macrotask</li><li>执行所有在microtask队列里的任务。</li><li>更新渲染</li><li>返回到开始</li></ol><h3 id="另一理解"><a href="#另一理解" class="headerlink" title="另一理解"></a>另一理解</h3><ol><li>一段代码执行时先执行宏任务中的同步代码</li><li>如果遇到像setTimeOut这种宏任务就会把代码放置在宏任务队列中去</li><li>如果遇到promise.then这类任务会放置在微任务队列中。</li><li>在本轮宏任务执行完之后会依此执行本轮微任务队列中的所有代码，然后开始下一轮的宏任务代码。</li></ol><p><strong>注</strong>：await后面无论接的是同步代码还是异步代码都必须等他们执行完毕之后才能执行await结果后面的代码。</p><p><strong>注释</strong>：在遇见定时器后，会将定时器内的函数进行注册，也就是放在Event Table。然后在定时器设定的事件后将Event Table内注册的函数放入Event queue。如果主线程中的call stack为空就将Event queue按顺序放入call stack中进行执行，如果call stack并不为空，Event queue内的事件并不会进入call stack，也就不会执行。</p><p>在call stack中的内容执行完毕后清空，会在Event queue检查一下哪些任务时宏任务，哪些是微任务，然后执行所有的微任务，然后执行下一个宏任务，之后再次执行所有的微任务。也就是说在主线程任务执行完毕后会把任务队列里的微任务全部执行，然后再执行下一个宏任务，这个宏任务执行完再次检查队列内部的微任务，有就全部执行，没有就再执行一个宏任务。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EventLoop </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
